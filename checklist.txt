### Features Checklist

- [x] Create a budgets application within the project
- [x] Implement a Budget model for your application which should have the following attributes:
- [ ] id: Primary Key / Integer
- [x] name: String
- [x] total_budget: Float
- [x] remaining_budget: Float (@property calculation)
- [x] Implement a Transaction model for your application which should have the following attributes:
- [ ] id: Primary Key / Integer
- [x] budget: ForeignKey(Budget)
- [x] type: Choices(withdrawal, deposit)
- [x] amount: Float
- [x] description: String
Create class views for this application:
- [x] BudgetListView: List all available budgets owned by current user
- [x] BudgetDetailView: List all available transactions within the selected budget
- [x] Create a template for each of the above view controllers
- [ ] Configure the application’s urls with the projects urls
- [ ] Ensure that your site is styled, and that you are managing any other static assets appropriately
Testing
- [ ] You are required to meet or exceed an 80% coverage benchmark for this application
- [ ] As of today, you will have a fairly basic application, though some of your previous tests should translate pretty quickly to what you’ve created here
- [ ] Ensure that you’ve unit tested all of your view controllers, and that your integration tests have at least covered basic status codes and response content for each endpoint
General
- [x] Create a repo and appropriate branch name
- [x] import all starter files
- [x] Label directories, files, functions, classes, and methods as instructed or as appropriate
- [x] Prepare Checklist to use with assignment completion
- [ ] Write at least 3 test assertions
- [ ] Ensure code is passing all tests
- [x] Update README as appropriate
