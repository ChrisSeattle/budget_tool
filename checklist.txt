# Features Checklist

## Code 38 - DRF

- [ ] Create a new app in your project called budget_api
Features in your budget_api app
- [ ] Create a UserSerializer class for handling User model interactions through your API
- [ ] Create a UserAPIView class for handling both a creation and retrieval of a User model instance
- [ ] POST should accept valid inputs and create the new user and return that user data (without the password) to the client
- [ ] POST should accept valid inputs for authentication and return a token to the client for subsequent authenticated requests to the API
- [ ] Create a user/ endpoint to handle the class views for this portion of the API, and ensure that these endpoints are mounted to a base path of api/v1/ at the project root’s urls.py
Testing
- [ ] You are required to meet or exceed an 80% coverage benchmark for this application.
- [ ] Your focus today is to integration test your API; specifically the new RESTful endpoints created for user registration and login
General
- [x] appropriate branch name
- [x] Label directories, files, functions, classes, and methods as instructed or as appropriate
- [x] Prepare Checklist to use with assignment completion
- [ ] Write at least 3 test assertions
- [x] Update README as appropriate


##Code 37 - Forms

- [x] Construct views in your budgets application that allow the creation of Budget and Transaction instances
- [x] From the primary view of your budgets (list view), add a prominent button that allows for easy navigation to a form input for a new Budget
- [x] From the detail view of any Budget instance, add a prominent button that allows for easy navigation to a form input for a new Transaction
- [x] On successful New Budget form submission, return user Budget list
- [ ] On successful New Transaction for submission, return user to Budget Detail view they had come from (just added to that Budget)
Testing
- [ ] You are required to meet or exceed an 80% coverage benchmark for this application.
- [ ] You do not need to test the form inputs themselves; i.e. Selenium testing or some other headless browser test feature
- [ ] You do need to unit test the endpoints, and additional view controller or model functionality
- [ ] You do need to integration test the endpoints and req/res cycle throughout your application
General
- [x] appropriate branch name
- [x] Label directories, files, functions, classes, and methods as instructed or as appropriate
- [x] Prepare Checklist to use with assignment completion
- [ ] Write at least 3 test assertions
- [x] Update README as appropriate

##Code 36 - Class Based Views

- [x] Create a budgets application within the project
- [x] Implement a Budget model for your application which should have the following attributes:
- [ ] id: Primary Key / Integer
- [x] name: String
- [x] total_budget: Float
- [x] remaining_budget: Float (@property calculation)
- [x] Implement a Transaction model for your application which should have the following attributes:
- [ ] id: Primary Key / Integer
- [x] budget: ForeignKey(Budget)
- [x] type: Choices(withdrawal, deposit)
- [x] amount: Float
- [x] description: String
Create class views for this application:
- [x] BudgetListView: List all available budgets owned by current user
- [x] BudgetDetailView: List all available transactions within the selected budget
- [x] Create a template for each of the above view controllers
- [ ] Configure the application’s urls with the projects urls
- [ ] Ensure that your site is styled, and that you are managing any other static assets appropriately
Testing
- [ ] You are required to meet or exceed an 80% coverage benchmark for this application
- [ ] As of today, you will have a fairly basic application, though some of your previous tests should translate pretty quickly to what you’ve created here
- [ ] Ensure that you’ve unit tested all of your view controllers, and that your integration tests have at least covered basic status codes and response content for each endpoint
General
- [x] Create a repo and appropriate branch name
- [x] import all starter files
- [x] Label directories, files, functions, classes, and methods as instructed or as appropriate
- [x] Prepare Checklist to use with assignment completion
- [ ] Write at least 3 test assertions
- [ ] Ensure code is passing all tests
- [x] Update README as appropriate



